#!/usr/bin/zsh

set -e

MY_GPG_KEY_ID="12C87A28FEAC6B20"

script_name="$(basename "$0")"
dotfiles_dir="$(cd "$(dirname "$0")"; pwd)"
cd "$dotfiles_dir"

assign() {
  op="$1"
  if [[ "$op" != "link" && "$op" != "copy" ]]; then
    echo "Unknown operation: $op"
    exit 1
  fi

  orig_file="$2"
  dest_file="$3"

  mkdir -p "$(dirname "$orig_file")"
  mkdir -p "$(dirname "$dest_file")"

  rm -rf "$dest_file"

  if [[ "$op" == "link" ]]; then
    ln -s "$orig_file" "$dest_file"
    echo "$dest_file -> $orig_file"
  else
    cp -R "$orig_file" "$dest_file"
    echo "$dest_file <= $orig_file"
  fi
}

link() {
  assign "link" "$dotfiles_dir/$1" "$HOME/$1"
}

copy() {
  assign "copy" "$dotfiles_dir/$1" "/$1"
}

systemctl_enable_start() {
  if [ "$#" -eq 1 ]; then
    target="system"
    name="$1"
  else
    target="$1"
    name="$2"
  fi
  if [[ "$target" == "user" ]]; then
    echo "systemctl --user enable & start "$name""
    systemctl --user enable "$name"
    systemctl --user start  "$name"
  else
    echo "systemctl enable & start "$name""
    systemctl enable "$name"
    systemctl start  "$name"
  fi
}


if [ "$(whoami)" != "root" ]; then
  echo "======================================="
  echo "Setting up dotfiles for current user..."
  echo "======================================="

  link "bin"

  link ".ghc/ghci.conf"
  link ".gnupg/gpg.conf"

  link ".config/htop"
  link ".config/kak"
  link ".config/nvim"
  link ".config/ranger/rc.conf"
  link ".config/rofi"
  link ".config/qalculate/qalc.cfg"
  link ".config/vifm/vifmrc"

  link ".config/systemd/user/backup-packages.service"
  link ".config/systemd/user/backup-packages.timer"

  link ".agignore"
  link ".gitconfig"
  link ".gitconfig.work"
  link ".gitignore"
  link ".mdlrc"
  link ".npmrc"
  link ".pylintrc"
  link ".tigrc"
  link ".tmux.conf"
  link ".zprofile"
  link ".zsh"
  link ".zshrc"

  if [[ "$HOST" =~ "desktop-" ]]; then
    link ".i3"
    link ".i3status.conf"

    link ".gnupg/gpg-agent.conf"

    link ".config/chromium-flags.conf"
    link ".config/copyq/copyq.conf"
    link ".config/dunst"
    link ".config/fontconfig/conf.d/30-infinality-custom.conf"
    link ".config/fontconfig/conf.d/70-monospace.conf"
    link ".config/gsimplecal"
    link ".config/gtk-3.0"
    link ".config/kitty"
    link ".config/mimeapps.list"
    link ".config/mpv/mpv.conf"
    link ".config/redshift"
    link ".config/repoctl"
    link ".config/transmission/settings.json"
    link ".config/USBGuard"

    link ".config/systemd/user/urlwatch.service"
    link ".config/systemd/user/urlwatch.timer"

    link ".local/share/fonts/taskbar.ttf"

    link ".compton.conf"
    link ".gtkrc-2.0"
    link ".urlwatch/urls.yaml"
    link ".xsession"
    link ".Xresources"
  fi

  echo ""
  echo "================================="
  echo "Enabling and starting services..."
  echo "================================="

  systemctl --user daemon-reload
  systemctl_enable_start "user" "backup-packages.timer"

  if [[ "$HOST" =~ "desktop-" ]]; then
    systemctl_enable_start "user" "dunst.service"
    systemctl_enable_start "user" "redshift.service"
    systemctl_enable_start "user" "urlwatch.timer"
    systemctl_enable_start "user" "yubikey-touch-detector.service"
  fi

  echo ""
  echo "======================================="
  echo "Finishing various user configuration..."
  echo "======================================="

  if ! gpg -k | grep "$MY_GPG_KEY_ID" > /dev/null; then
    echo "Importing my public PGP key"
    curl -s https://keybase.io/maximbaz/pgp_keys.asc| gpg --import
    gpg --trusted-key "$MY_GPG_KEY_ID" > /dev/null
  fi

  if [[ "$HOST" =~ "desktop-" ]]; then
    if [[ ! -a "$HOME/.config/Yubico/u2f_keys" ]]; then
      echo "Configuring YubiKey for sudo access (touch it now)"
      mkdir -p "$HOME/.config/Yubico"
      pamu2fcfg -umaximbaz > "$HOME/.config/Yubico/u2f_keys"
    fi

    if [[ -a "$HOME/.password-store" ]]; then
      echo "Configuring automatic git push for pass"
      echo "#!/usr/bin/zsh\n\npass git push" >! "$HOME/.password-store/.git/hooks/post-commit"
      chmod +x "$HOME/.password-store/.git/hooks/post-commit"
    fi

    echo "Disabling Dropbox autoupdate"
    rm -rf ~/.dropbox-dist
    install -dm0 ~/.dropbox-dist

    echo "Configuring GTK file chooser dialog"
    gsettings set org.gtk.Settings.FileChooser sort-directories-first true

    echo "Ignoring further changes to often changing config"
    git update-index --assume-unchanged ".config/transmission/settings.json"

    echo "Creating pacman cache for custom AUR repo"
    [[ ! -a "/var/cache/pacman/maximbaz-aur/" ]] && sudo install -d "/var/cache/pacman/maximbaz-aur" -o maximbaz
    if [[ ! -a "/var/cache/pacman/maximbaz-aur/maximbaz-aur.db.tar" ]]; then
      if read -q "?Press 'y' to mirror the remote repo or 'n' to create an empty one: "; then
        echo ""
        wget -m -nH -np -q --show-progress --reject="index.html*" --cut-dirs=1 -P '/var/cache/pacman/maximbaz-aur/' 'https://arch-repo.maximbaz.com:4433/maximbaz-aur/'
      else
        echo ""
        repo-add -s "/var/cache/pacman/maximbaz-aur/maximbaz-aur.db.tar"
      fi
    fi
  fi

  echo ""
  echo "====================================="
  echo "Switching to root user to continue..."
  echo "====================================="
  echo "..."
  sudo -s "$dotfiles_dir/$script_name"
  exit
fi


if [[ "$(whoami)" == "root" ]]; then
  echo ""
  echo "=========================="
  echo "Setting up /etc configs..."
  echo "=========================="

  copy "etc/conf.d/snapper"
  copy "etc/environment"
  copy "etc/profile.d/maven.sh"
  copy "etc/profile.d/zz_custom.sh"
  copy "etc/snap-pac.conf"
  copy "etc/snapper/configs/root"
  copy "etc/ssh/ssh_config"
  copy "etc/sysctl.d/10-swappiness.conf"
  copy "etc/sysctl.d/99-idea.conf"
  copy "etc/sysctl.d/99-sysctl.conf"
  copy "etc/systemd/journald.conf"
  copy "etc/systemd/system/paccache.service"
  copy "etc/systemd/system/paccache.timer"
  copy "etc/systemd/system/reflector.service"
  copy "etc/systemd/system/reflector.timer"
  copy "etc/updatedb.conf"

  if [[ "$HOST" =~ "desktop-" ]]; then
    copy "etc/grub.d/41_snapshots-btrfs_config"
    copy "etc/lightdm/lightdm.conf"
    copy "etc/lightdm/lightdm-gtk-greeter.conf"
    copy "etc/NetworkManager/dispatcher.d/pia-vpn"
    copy "etc/pacman.conf"
    copy "etc/pacman.d/maximbaz-aur"
    copy "etc/pam.d/sudo"
    copy "etc/private-internet-access/pia.conf"
    copy "etc/sudoers"
    copy "etc/systemd/logind.conf"
    copy "etc/systemd/system/backup-aur@devbox"
    copy "etc/systemd/system/backup-aur@.service"
    copy "etc/udev/rules.d/81-ac-battery-change.rules"
    copy "etc/usbguard/usbguard-daemon.conf"
    copy "etc/X11/xorg.conf.d/00-keyboard.conf"
    copy "etc/X11/xorg.conf.d/30-touchpad.conf"
  fi

  if [[ "$HOST" =~ "crmdevvm-" ]]; then
    copy "etc/systemd/system/reverse-ssh@devbox"
    copy "etc/systemd/system/reverse-ssh@.service"
  fi

  echo ""
  echo "================================="
  echo "Enabling and starting services..."
  echo "================================="

  sysctl --system > /dev/null

  systemctl daemon-reload
  systemctl_enable_start "system" "paccache.timer"
  systemctl_enable_start "system" "reflector.timer"
  systemctl_enable_start "system" "NetworkManager.service"
  systemctl_enable_start "system" "NetworkManager-wait-online.service"
  systemctl_enable_start "system" "docker.service"
  systemctl_enable_start "system" "ufw.service"
  systemctl_enable_start "system" "snapper-cleanup.timer"

  if [[ "$HOST" =~ "desktop-" ]]; then
    systemctl enable "lightdm.service"
    systemctl enable "backup-aur@devbox.service"
    systemctl_enable_start "system" "dropbox@maximbaz.service"
    systemctl_enable_start "system" "pcscd.service"
    systemctl_enable_start "system" "teamviewerd.service"
    systemctl_enable_start "system" "usbguard.service"
    systemctl_enable_start "system" "usbguard-dbus.service"

    # tlp
    systemctl_enable_start "system" "tlp.service"
    systemctl_enable_start "system" "tlp-sleep.service"
    systemctl_enable_start "system" "NetworkManager-dispatcher.service"
    systemctl mask "systemd-rfkill.service"
  fi

  if [[ "$HOST" =~ "crmdevvm-" ]]; then
    systemctl_enable_start "system" "sshd.socket"
    systemctl_enable_start "system" "reverse-ssh@devbox.service"
  fi

  echo ""
  echo "=============================="
  echo "Setting dash as /usr/bin/sh..."
  echo "=============================="
  ln -sf /usr/bin/dash /usr/bin/sh
  echo "Done"

  echo ""
  echo "==============================="
  echo "Creating top level Trash dir..."
  echo "==============================="
  mkdir --parent /.Trash
  chmod a+rw /.Trash
  chmod +t /.Trash
  echo "Done"

  echo ""
  echo "======================================="
  echo "Finishing various user configuration..."
  echo "======================================="

  echo "Adding my public key to pacman"
  if ! pacman-key --list-keys | grep "$MY_GPG_KEY_ID" > /dev/null; then
    pacman-key --recv-keys "$MY_GPG_KEY_ID"
    pacman-key --lsign-key "$MY_GPG_KEY_ID"
  fi

  echo "Configuring devtools/makepkg"
  sed -i "s/PKGEXT='.pkg.tar.xz'/PKGEXT='.pkg.tar'/" /usr/share/devtools/makepkg-x86_64.conf

  echo "Configuring firewall"
  [[ "$(ufw status | grep -o '[^ ]\+$')" != "active" ]] && ufw --force reset > /dev/null
  ufw default reject
  [[ "$HOST" =~ "crmdevvm-" ]] && ufw allow ssh
  ufw enable
  find /etc/ufw -type f -name '*.rules.*' -delete

  if [[ "$HOST" =~ "desktop-" ]]; then
    echo "Configuring aurutils-contrib"
    ln -sf /usr/share/aurutils/contrib/vercmp-devel /usr/lib/aurutils/aur-vercmp-devel

    echo "Joining autologin group"
    groupadd -rf autologin
    gpasswd -a maximbaz autologin

    echo "Enabling infinality aliases"
    ln -sf /etc/fonts/conf.avail/30-infinality-aliases.conf /etc/fonts/conf.d/30-infinality-aliases.conf
  fi

  if [[ "$HOST" =~ "crmdevvm-" ]]; then
    echo "Configuring gpg-agent forwarding"
    sed -zi "s/\(VersionAddendum[^\n]*\n\)\(StreamLocalBindUnlink[^\n]*\n\)\?/\1StreamLocalBindUnlink yes\n/" /etc/ssh/sshd_config
  fi

  echo "Reload udev rules"
  udevadm control --reload
  udevadm trigger
fi
